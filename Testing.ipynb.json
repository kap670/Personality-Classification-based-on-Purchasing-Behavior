{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import openpyxl\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/user/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: DeprecationWarning: Call to deprecated function get_sheet_names (Use wb.sheetnames).\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "xls = pd.ExcelFile('Personal Financial Example.xlsx')\n",
    "tax = np.array([1.0635,1.0635,1.0635,1.06625,1.06625,1.05,1.08875,1.13575,1.05,1.06,1.08,1.05])\n",
    "portions = np.zeros([40,12])\n",
    "\n",
    "wb = openpyxl.load_workbook('Personal Financial Example.xlsx')\n",
    "sheets = wb.get_sheet_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tax_calculate (result): \n",
    "    tem_r = np.array(result['DA']['count']*result['DA']['mean'])\n",
    "    return tem_r*tax\n",
    "\n",
    "def consum_por (result): \n",
    "    portion = np.zeros([12])\n",
    "    for i in range(0,len(result)):\n",
    "        portion[i] = result[i]/sum(result)\n",
    "    return portion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Unexpected Missing Value in Sheet 0\n",
      "No Errors in Sheet 0\n",
      "No Unexpected Missing Value in Sheet 1\n",
      "No Errors in Sheet 1\n",
      "No Unexpected Missing Value in Sheet 2\n",
      "No Errors in Sheet 2\n",
      "No Unexpected Missing Value in Sheet 3\n",
      "No Errors in Sheet 3\n",
      "No Unexpected Missing Value in Sheet 4\n",
      "No Errors in Sheet 4\n",
      "No Unexpected Missing Value in Sheet 5\n",
      "No Errors in Sheet 5\n",
      "No Unexpected Missing Value in Sheet 6\n",
      "No Errors in Sheet 6\n",
      "No Unexpected Missing Value in Sheet 7\n",
      "No Errors in Sheet 7\n",
      "No Unexpected Missing Value in Sheet 8\n",
      "No Errors in Sheet 8\n",
      "No Unexpected Missing Value in Sheet 9\n",
      "No Errors in Sheet 9\n",
      "No Unexpected Missing Value in Sheet 10\n",
      "No Errors in Sheet 10\n",
      "No Unexpected Missing Value in Sheet 11\n",
      "No Errors in Sheet 11\n",
      "No Unexpected Missing Value in Sheet 12\n",
      "No Errors in Sheet 12\n",
      "No Unexpected Missing Value in Sheet 13\n",
      "No Errors in Sheet 13\n",
      "No Unexpected Missing Value in Sheet 14\n",
      "No Errors in Sheet 14\n",
      "No Unexpected Missing Value in Sheet 15\n",
      "No Errors in Sheet 15\n",
      "No Unexpected Missing Value in Sheet 16\n",
      "No Errors in Sheet 16\n",
      "No Unexpected Missing Value in Sheet 17\n",
      "No Errors in Sheet 17\n",
      "No Unexpected Missing Value in Sheet 18\n",
      "No Errors in Sheet 18\n",
      "No Unexpected Missing Value in Sheet 19\n",
      "No Errors in Sheet 19\n",
      "No Unexpected Missing Value in Sheet 20\n",
      "No Errors in Sheet 20\n",
      "No Unexpected Missing Value in Sheet 21\n",
      "No Errors in Sheet 21\n",
      "No Unexpected Missing Value in Sheet 22\n",
      "No Errors in Sheet 22\n",
      "No Unexpected Missing Value in Sheet 23\n",
      "No Errors in Sheet 23\n",
      "No Unexpected Missing Value in Sheet 24\n",
      "No Errors in Sheet 24\n",
      "No Unexpected Missing Value in Sheet 25\n",
      "No Errors in Sheet 25\n",
      "No Unexpected Missing Value in Sheet 26\n",
      "No Errors in Sheet 26\n",
      "No Unexpected Missing Value in Sheet 27\n",
      "No Errors in Sheet 27\n",
      "No Unexpected Missing Value in Sheet 28\n",
      "No Errors in Sheet 28\n",
      "No Unexpected Missing Value in Sheet 29\n",
      "No Errors in Sheet 29\n",
      "No Unexpected Missing Value in Sheet 30\n",
      "No Errors in Sheet 30\n",
      "No Unexpected Missing Value in Sheet 31\n",
      "No Errors in Sheet 31\n",
      "No Unexpected Missing Value in Sheet 32\n",
      "No Errors in Sheet 32\n",
      "No Unexpected Missing Value in Sheet 33\n",
      "No Errors in Sheet 33\n",
      "No Unexpected Missing Value in Sheet 34\n",
      "No Errors in Sheet 34\n",
      "No Unexpected Missing Value in Sheet 35\n",
      "No Errors in Sheet 35\n",
      "No Unexpected Missing Value in Sheet 36\n",
      "No Errors in Sheet 36\n",
      "No Unexpected Missing Value in Sheet 37\n",
      "No Errors in Sheet 37\n",
      "No Unexpected Missing Value in Sheet 38\n",
      "No Errors in Sheet 38\n",
      "No Unexpected Missing Value in Sheet 39\n",
      "No Errors in Sheet 39\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(sheets)):\n",
    "    indicator = 0\n",
    "    df = pd.read_excel(xls,sheets[i])\n",
    "    df = df[['TRANSNumber','TimeStamp','DA','Oper','CTR']]\n",
    "    df_short = df[['TRANSNumber','TimeStamp','DA','Oper']]\n",
    "    null_check = df_short.isnull()\n",
    "    for item in null_check.values:\n",
    "         for value in item:\n",
    "                if value == True:\n",
    "                    print(\"Unexpected Null in Sheet\",i)\n",
    "                    indicator = 1\n",
    "    if indicator == 0:\n",
    "        print(\"No Unexpected Missing Value in Sheet\",i)\n",
    "    \n",
    "    \n",
    "    error_indicator = 0\n",
    "    for item in df.values:\n",
    "        if item[2] < 0:\n",
    "            if not item[4]:\n",
    "                print(\"Errors Happen in Sheet\",i)\n",
    "                error_indicator = 1   \n",
    "    if error_indicator == 0:\n",
    "        print(\"No Errors in Sheet\",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(sheets)):\n",
    "    df = pd.read_excel(xls,sheets[i])\n",
    "    df = df[['TRANSNumber','TimeStamp','DA','Oper','CTR']]\n",
    "    df = df.dropna()\n",
    "    df['CTR_1'] = df['CTR'].str[0:2]\n",
    "    df['CTR_2'] = df['CTR'].str[8:]\n",
    "    df['DA'] = abs(df['DA'])\n",
    "    \n",
    "    tem1 = df.groupby(['CTR_1','CTR_2']).describe()\n",
    "    tem2 = tax_calculate(tem1)\n",
    "    tem3 = consum_por(tem2)\n",
    "    portions[i,:] = tem3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3, 1, 4, 2, 3, 1, 3, 2, 1, 3, 1, 0, 2, 2, 0, 1, 0, 0, 0, 3, 0,\n",
       "       0, 1, 2, 1, 3, 1, 1, 1, 2, 0, 3, 1, 2, 0, 3, 3, 1, 2], dtype=int32)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans_q1 = KMeans(n_clusters=5, random_state=1).fit(portions)\n",
    "kmeans_q1.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>12</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>2.0</th>\n",
       "      <th>3.0</th>\n",
       "      <th>4.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.338962</td>\n",
       "      <td>0.326538</td>\n",
       "      <td>0.352287</td>\n",
       "      <td>0.333563</td>\n",
       "      <td>0.441820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.349952</td>\n",
       "      <td>0.360666</td>\n",
       "      <td>0.323983</td>\n",
       "      <td>0.305061</td>\n",
       "      <td>0.314466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.301064</td>\n",
       "      <td>0.310887</td>\n",
       "      <td>0.358272</td>\n",
       "      <td>0.345600</td>\n",
       "      <td>0.273029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "12         0.0       1.0       2.0       3.0       4.0\n",
       "mean  0.338962  0.326538  0.352287  0.333563  0.441820\n",
       "mean  0.349952  0.360666  0.323983  0.305061  0.314466\n",
       "mean  0.301064  0.310887  0.358272  0.345600  0.273029"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classification = kmeans_q1.labels_.reshape(40,1)\n",
    "tem = np.hstack((portions,classification))\n",
    "class1 = pd.DataFrame(tem)\n",
    "class_des = class1.groupby([12]).describe()\n",
    "class_essen = sum([class_des[0]['mean'],class_des[3]['mean'],class_des[6]['mean'],class_des[9]['mean']])\n",
    "class_invest = sum([class_des[1]['mean'],class_des[4]['mean'],class_des[7]['mean'],class_des[10]['mean']])\n",
    "class_super = sum([class_des[3]['mean'],class_des[5]['mean'],class_des[8]['mean'],class_des[11]['mean']])\n",
    "class_indicate = pd.DataFrame([class_essen,class_invest,class_super])\n",
    "class_indicate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/user/anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2349: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n",
      "  if isinstance(obj, collections.Iterator):\n",
      "/Users/user/anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2366: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n",
      "  return list(data) if isinstance(data, collections.MappingView) else data\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'K-means Clustering Visualization for Problem One')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "plt.scatter(portions[:, 0], portions[:, 1], c=kmeans_q1.labels_, s=50, cmap='viridis')\n",
    "centers = kmeans_q1.cluster_centers_\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='r', s=800, alpha=0.5);\n",
    "plt.title(\"K-means Clustering Visualization for Problem One\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.3227606028694785, 0.3272445652420564, 0.3482036147725572, 0.3324560351298912, 0.3255861072707298]\n"
     ]
    }
   ],
   "source": [
    "q1_ind_0 = list(class_indicate[0.0])[0]*0.25+list(class_indicate[0.0])[1]*0.25+list(class_indicate[0.0])[2]*0.50\n",
    "q1_ind_1 = list(class_indicate[1.0])[0]*0.25+list(class_indicate[1.0])[1]*0.25+list(class_indicate[1.0])[2]*0.50\n",
    "q1_ind_2 = list(class_indicate[2.0])[0]*0.25+list(class_indicate[2.0])[1]*0.25+list(class_indicate[2.0])[2]*0.50\n",
    "q1_ind_3 = list(class_indicate[3.0])[0]*0.25+list(class_indicate[3.0])[1]*0.25+list(class_indicate[3.0])[2]*0.50\n",
    "q1_ind_4 = list(class_indicate[4.0])[0]*0.25+list(class_indicate[4.0])[1]*0.25+list(class_indicate[4.0])[2]*0.50\n",
    "q1_ind = list([q1_ind_0,q1_ind_1,q1_ind_2,q1_ind_3,q1_ind_4])\n",
    "print(q1_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 0, 4, 3, 1, 2, 1, 3, 0, 1, 0, 0, 1, 3, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 3, 0, 1, 2, 0, 0, 3, 0, 1, 0, 3, 0, 2, 1, 0, 3], dtype=int32)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans_q2 = KMeans(n_clusters=5, random_state=2).fit(portions)\n",
    "kmeans_q2.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>12</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>2.0</th>\n",
       "      <th>3.0</th>\n",
       "      <th>4.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.332316</td>\n",
       "      <td>0.343451</td>\n",
       "      <td>0.304778</td>\n",
       "      <td>0.349866</td>\n",
       "      <td>0.441820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.356138</td>\n",
       "      <td>0.302057</td>\n",
       "      <td>0.360901</td>\n",
       "      <td>0.329173</td>\n",
       "      <td>0.314466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.304536</td>\n",
       "      <td>0.348041</td>\n",
       "      <td>0.321088</td>\n",
       "      <td>0.355576</td>\n",
       "      <td>0.273029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "12         0.0       1.0       2.0       3.0       4.0\n",
       "mean  0.332316  0.343451  0.304778  0.349866  0.441820\n",
       "mean  0.356138  0.302057  0.360901  0.329173  0.314466\n",
       "mean  0.304536  0.348041  0.321088  0.355576  0.273029"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classification = kmeans_q2.labels_.reshape(40,1)\n",
    "tem = np.hstack((portions,classification))\n",
    "class2 = pd.DataFrame(tem)\n",
    "class_des_q2 = class2.groupby([12]).describe()\n",
    "class_essen_q2 = sum([class_des_q2[0]['mean'],class_des_q2[3]['mean'],class_des_q2[6]['mean'],class_des_q2[9]['mean']])\n",
    "class_invest_q2 = sum([class_des_q2[1]['mean'],class_des_q2[4]['mean'],class_des_q2[7]['mean'],class_des_q2[10]['mean']])\n",
    "class_super_q2 = sum([class_des_q2[3]['mean'],class_des_q2[5]['mean'],class_des_q2[8]['mean'],class_des_q2[11]['mean']])\n",
    "class_indicate_q2 = pd.DataFrame([class_essen_q2,class_invest_q2,class_super_q2])\n",
    "class_indicate_q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.33223494635952466, 0.33115735335298685, 0.3467072927196897, 0.3294465774880664, 0.3677840307566506]\n"
     ]
    }
   ],
   "source": [
    "q2_ind_0 = list(class_indicate[0.0])[0]*0.5+list(class_indicate[0.0])[1]*0.25+list(class_indicate[0.0])[2]*0.25\n",
    "q2_ind_1 = list(class_indicate[1.0])[0]*0.5+list(class_indicate[1.0])[1]*0.25+list(class_indicate[1.0])[2]*0.25\n",
    "q2_ind_2 = list(class_indicate[2.0])[0]*0.5+list(class_indicate[2.0])[1]*0.25+list(class_indicate[2.0])[2]*0.25\n",
    "q2_ind_3 = list(class_indicate[3.0])[0]*0.5+list(class_indicate[3.0])[1]*0.25+list(class_indicate[3.0])[2]*0.25\n",
    "q2_ind_4 = list(class_indicate[4.0])[0]*0.5+list(class_indicate[4.0])[1]*0.25+list(class_indicate[4.0])[2]*0.25\n",
    "q2_ind = list([q2_ind_0,q2_ind_1,q2_ind_2,q2_ind_3,q2_ind_4])\n",
    "print(q2_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'K-means Clustering Visualization for Problem Two')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "plt.scatter(portions[:, 0], portions[:, 1], c=kmeans_q2.labels_, s=50, cmap='viridis')\n",
    "centers = kmeans_q2.cluster_centers_\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='r', s=800, alpha=0.5);\n",
    "plt.title(\"K-means Clustering Visualization for Problem Two\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 2, 4, 3, 1, 2, 0, 1, 3, 0, 1, 1, 0, 3, 1, 3, 1, 3, 1, 1, 1,\n",
       "       1, 2, 3, 3, 1, 2, 2, 1, 3, 1, 1, 2, 3, 1, 2, 0, 1, 3], dtype=int32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans_q3 = KMeans(n_clusters=5, random_state=3).fit(portions)\n",
    "kmeans_q3.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>12</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>2.0</th>\n",
       "      <th>3.0</th>\n",
       "      <th>4.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.339838</td>\n",
       "      <td>0.342714</td>\n",
       "      <td>0.317559</td>\n",
       "      <td>0.337767</td>\n",
       "      <td>0.441820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.293590</td>\n",
       "      <td>0.341647</td>\n",
       "      <td>0.366107</td>\n",
       "      <td>0.332940</td>\n",
       "      <td>0.314466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.365540</td>\n",
       "      <td>0.303554</td>\n",
       "      <td>0.311394</td>\n",
       "      <td>0.353255</td>\n",
       "      <td>0.273029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "12         0.0       1.0       2.0       3.0       4.0\n",
       "mean  0.339838  0.342714  0.317559  0.337767  0.441820\n",
       "mean  0.293590  0.341647  0.366107  0.332940  0.314466\n",
       "mean  0.365540  0.303554  0.311394  0.353255  0.273029"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classification = kmeans_q3.labels_.reshape(40,1)\n",
    "tem = np.hstack((portions,classification))\n",
    "class3 = pd.DataFrame(tem)\n",
    "class_des_q3 = class3.groupby([12]).describe()\n",
    "class_essen_q3 = sum([class_des_q3[0]['mean'],class_des_q3[3]['mean'],class_des_q3[6]['mean'],class_des_q3[9]['mean']])\n",
    "class_invest_q3 = sum([class_des_q3[1]['mean'],class_des_q3[4]['mean'],class_des_q3[7]['mean'],class_des_q3[10]['mean']])\n",
    "class_super_q3 = sum([class_des_q3[3]['mean'],class_des_q3[5]['mean'],class_des_q3[8]['mean'],class_des_q3[11]['mean']])\n",
    "class_indicate_q3 = pd.DataFrame([class_essen_q3,class_invest_q3,class_super_q3])\n",
    "class_indicate_q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.3349826367688622, 0.3396892892673923, 0.3396314474103155, 0.3223210560677171, 0.3359454875993643]\n"
     ]
    }
   ],
   "source": [
    "q3_ind_0 = list(class_indicate[0.0])[0]*0.25+list(class_indicate[0.0])[1]*0.5+list(class_indicate[0.0])[2]*0.25\n",
    "q3_ind_1 = list(class_indicate[1.0])[0]*0.25+list(class_indicate[1.0])[1]*0.5+list(class_indicate[1.0])[2]*0.25\n",
    "q3_ind_2 = list(class_indicate[2.0])[0]*0.25+list(class_indicate[2.0])[1]*0.5+list(class_indicate[2.0])[2]*0.25\n",
    "q3_ind_3 = list(class_indicate[3.0])[0]*0.25+list(class_indicate[3.0])[1]*0.5+list(class_indicate[3.0])[2]*0.25\n",
    "q3_ind_4 = list(class_indicate[4.0])[0]*0.25+list(class_indicate[4.0])[1]*0.5+list(class_indicate[4.0])[2]*0.25\n",
    "q3_ind = list([q3_ind_0,q3_ind_1,q3_ind_2,q3_ind_3,q3_ind_4])\n",
    "print(q3_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'K-means Clustering Visualization for Problem Three')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "plt.scatter(portions[:, 0], portions[:, 1], c=kmeans_q3.labels_, s=50, cmap='viridis')\n",
    "centers = kmeans_q3.cluster_centers_\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='r', s=800, alpha=0.5);\n",
    "plt.title(\"K-means Clustering Visualization for Problem Three\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "q1_answers=['E','A','D','C','B']\n",
    "q2_answers=['A','D','C','E','B']\n",
    "q3_answers=['A','E','D','B','C']\n",
    "\n",
    "answers = np.ones((40,3)) \n",
    "answers_num = np.ones((40,3))\n",
    "answers = answers.astype(np.str)\n",
    "for i in range(0,40):\n",
    "    for j in range(0,5):\n",
    "        if kmeans_q1.labels_[i] == j:\n",
    "            answers[i,0] = q1_answers[j]\n",
    "            answers_num[i,0] = j\n",
    "        if kmeans_q2.labels_[i] == j:\n",
    "            answers[i,1] = q2_answers[j]\n",
    "            answers_num[i,1] = j\n",
    "        if kmeans_q3.labels_[i] == j:\n",
    "            answers[i,2] = q1_answers[j]\n",
    "            answers_num[i,2] = j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>D</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>E</td>\n",
       "      <td>D</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>E</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>D</td>\n",
       "      <td>E</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    0  1  2\n",
       "0   C  D  E\n",
       "1   C  D  E\n",
       "2   A  A  D\n",
       "3   B  B  B\n",
       "4   D  E  C\n",
       "5   C  D  A\n",
       "6   A  C  D\n",
       "7   C  D  E\n",
       "8   D  E  A\n",
       "9   A  A  C\n",
       "10  C  D  E\n",
       "11  A  A  A\n",
       "12  E  A  A\n",
       "13  D  D  E\n",
       "14  D  E  C\n",
       "15  E  D  A\n",
       "16  A  A  C\n",
       "17  E  A  A\n",
       "18  E  A  C\n",
       "19  E  A  A\n",
       "20  C  D  A\n",
       "21  E  A  A\n",
       "22  E  A  A\n",
       "23  A  A  D\n",
       "24  D  E  C\n",
       "25  A  A  C\n",
       "26  C  D  A\n",
       "27  A  C  D\n",
       "28  A  A  D\n",
       "29  A  A  A\n",
       "30  D  E  C\n",
       "31  E  A  A\n",
       "32  C  D  A\n",
       "33  A  A  D\n",
       "34  D  E  C\n",
       "35  E  A  A\n",
       "36  C  C  D\n",
       "37  C  D  E\n",
       "38  A  A  A\n",
       "39  D  E  C"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "answers_estimation = pd.DataFrame(answers)\n",
    "answers_estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies = pd.get_dummies(answers_estimation)\n",
    "dummies.to_excel('Personal Answers Dummy.xlsx')\n",
    "answers_estimation.to_excel('Original Answers.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "percentages = np.zeros((40,5))\n",
    "percentages[:,0] =  (-0.02158) * answers_num[:,0] + 0.00724 * answers_num[:,1] + 0.00927 * answers_num[:,2] + 0.52174\n",
    "percentages[:,1] = (-0.00239) * answers_num[:,0] - 0.00528 * answers_num[:,1] + 0.00644 * answers_num[:,2] + 0.42196\n",
    "percentages[:,2] = (-0.01409) * answers_num[:,0] - 0.0001538 * answers_num[:,1] - 0.00010867* answers_num[:,2] + 0.60706\n",
    "percentages[:,3] = 0.0077 * answers_num[:,0] + 0.00553 * answers_num[:,1] - 0.00655 * answers_num[:,2] + 0.21775\n",
    "percentages[:,4] = 0.00955 * answers_num[:,0] + 0.00589 * answers_num[:,1] - 0.01142 * answers_num[:,2] + 0.59424"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Openness</th>\n",
       "      <th>Concientiousness</th>\n",
       "      <th>Extraversion</th>\n",
       "      <th>Agreebleness</th>\n",
       "      <th>Neuroticism</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>46.42%</td>\n",
       "      <td>40.95%</td>\n",
       "      <td>56.46%</td>\n",
       "      <td>24.64%</td>\n",
       "      <td>62.88%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46.42%</td>\n",
       "      <td>40.95%</td>\n",
       "      <td>56.46%</td>\n",
       "      <td>24.64%</td>\n",
       "      <td>62.88%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51.87%</td>\n",
       "      <td>43.24%</td>\n",
       "      <td>59.28%</td>\n",
       "      <td>21.23%</td>\n",
       "      <td>58.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.15%</td>\n",
       "      <td>41.70%</td>\n",
       "      <td>54.97%</td>\n",
       "      <td>24.45%</td>\n",
       "      <td>61.03%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>47.35%</td>\n",
       "      <td>41.59%</td>\n",
       "      <td>56.45%</td>\n",
       "      <td>23.98%</td>\n",
       "      <td>61.74%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>53.32%</td>\n",
       "      <td>42.19%</td>\n",
       "      <td>59.24%</td>\n",
       "      <td>22.34%</td>\n",
       "      <td>59.27%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>46.42%</td>\n",
       "      <td>40.95%</td>\n",
       "      <td>56.46%</td>\n",
       "      <td>24.64%</td>\n",
       "      <td>62.88%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>50.96%</td>\n",
       "      <td>40.78%</td>\n",
       "      <td>57.83%</td>\n",
       "      <td>24.32%</td>\n",
       "      <td>61.96%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>52.80%</td>\n",
       "      <td>43.89%</td>\n",
       "      <td>59.26%</td>\n",
       "      <td>20.58%</td>\n",
       "      <td>56.95%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>46.42%</td>\n",
       "      <td>40.95%</td>\n",
       "      <td>56.46%</td>\n",
       "      <td>24.64%</td>\n",
       "      <td>62.88%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>50.94%</td>\n",
       "      <td>42.60%</td>\n",
       "      <td>59.29%</td>\n",
       "      <td>21.89%</td>\n",
       "      <td>59.24%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>48.58%</td>\n",
       "      <td>41.19%</td>\n",
       "      <td>57.87%</td>\n",
       "      <td>23.87%</td>\n",
       "      <td>61.92%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>53.83%</td>\n",
       "      <td>42.31%</td>\n",
       "      <td>60.68%</td>\n",
       "      <td>21.67%</td>\n",
       "      <td>58.87%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>52.80%</td>\n",
       "      <td>43.89%</td>\n",
       "      <td>59.26%</td>\n",
       "      <td>20.58%</td>\n",
       "      <td>56.95%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>54.95%</td>\n",
       "      <td>44.13%</td>\n",
       "      <td>60.67%</td>\n",
       "      <td>19.81%</td>\n",
       "      <td>56.00%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>47.35%</td>\n",
       "      <td>41.59%</td>\n",
       "      <td>56.45%</td>\n",
       "      <td>23.98%</td>\n",
       "      <td>61.74%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>51.87%</td>\n",
       "      <td>43.24%</td>\n",
       "      <td>59.28%</td>\n",
       "      <td>21.23%</td>\n",
       "      <td>58.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>52.80%</td>\n",
       "      <td>43.89%</td>\n",
       "      <td>59.26%</td>\n",
       "      <td>20.58%</td>\n",
       "      <td>56.95%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>47.35%</td>\n",
       "      <td>41.59%</td>\n",
       "      <td>56.45%</td>\n",
       "      <td>23.98%</td>\n",
       "      <td>61.74%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>53.32%</td>\n",
       "      <td>42.19%</td>\n",
       "      <td>59.24%</td>\n",
       "      <td>22.34%</td>\n",
       "      <td>59.27%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>51.87%</td>\n",
       "      <td>43.24%</td>\n",
       "      <td>59.28%</td>\n",
       "      <td>21.23%</td>\n",
       "      <td>58.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>50.94%</td>\n",
       "      <td>42.60%</td>\n",
       "      <td>59.29%</td>\n",
       "      <td>21.89%</td>\n",
       "      <td>59.24%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>47.35%</td>\n",
       "      <td>41.59%</td>\n",
       "      <td>56.45%</td>\n",
       "      <td>23.98%</td>\n",
       "      <td>61.74%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>51.87%</td>\n",
       "      <td>43.24%</td>\n",
       "      <td>59.28%</td>\n",
       "      <td>21.23%</td>\n",
       "      <td>58.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>53.10%</td>\n",
       "      <td>42.84%</td>\n",
       "      <td>60.70%</td>\n",
       "      <td>21.12%</td>\n",
       "      <td>58.28%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>49.00%</td>\n",
       "      <td>41.71%</td>\n",
       "      <td>56.43%</td>\n",
       "      <td>23.88%</td>\n",
       "      <td>61.18%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>46.42%</td>\n",
       "      <td>40.95%</td>\n",
       "      <td>56.46%</td>\n",
       "      <td>24.64%</td>\n",
       "      <td>62.88%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>50.94%</td>\n",
       "      <td>42.60%</td>\n",
       "      <td>59.29%</td>\n",
       "      <td>21.89%</td>\n",
       "      <td>59.24%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>52.81%</td>\n",
       "      <td>42.07%</td>\n",
       "      <td>57.81%</td>\n",
       "      <td>23.01%</td>\n",
       "      <td>59.67%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Openness Concientiousness Extraversion Agreebleness Neuroticism\n",
       "0    46.42%           40.95%       56.46%       24.64%      62.88%\n",
       "1    46.42%           40.95%       56.46%       24.64%      62.88%\n",
       "2    51.87%           43.24%       59.28%       21.23%      58.09%\n",
       "3    50.15%           41.70%       54.97%       24.45%      61.03%\n",
       "4    52.81%           42.07%       57.81%       23.01%      59.67%\n",
       "5    47.35%           41.59%       56.45%       23.98%      61.74%\n",
       "6    53.32%           42.19%       59.24%       22.34%      59.27%\n",
       "7    46.42%           40.95%       56.46%       24.64%      62.88%\n",
       "8    50.96%           40.78%       57.83%       24.32%      61.96%\n",
       "9    52.80%           43.89%       59.26%       20.58%      56.95%\n",
       "10   46.42%           40.95%       56.46%       24.64%      62.88%\n",
       "11   50.94%           42.60%       59.29%       21.89%      59.24%\n",
       "12   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "13   48.58%           41.19%       57.87%       23.87%      61.92%\n",
       "14   52.81%           42.07%       57.81%       23.01%      59.67%\n",
       "15   53.83%           42.31%       60.68%       21.67%      58.87%\n",
       "16   52.80%           43.89%       59.26%       20.58%      56.95%\n",
       "17   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "18   54.95%           44.13%       60.67%       19.81%      56.00%\n",
       "19   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "20   47.35%           41.59%       56.45%       23.98%      61.74%\n",
       "21   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "22   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "23   51.87%           43.24%       59.28%       21.23%      58.09%\n",
       "24   52.81%           42.07%       57.81%       23.01%      59.67%\n",
       "25   52.80%           43.89%       59.26%       20.58%      56.95%\n",
       "26   47.35%           41.59%       56.45%       23.98%      61.74%\n",
       "27   53.32%           42.19%       59.24%       22.34%      59.27%\n",
       "28   51.87%           43.24%       59.28%       21.23%      58.09%\n",
       "29   50.94%           42.60%       59.29%       21.89%      59.24%\n",
       "30   52.81%           42.07%       57.81%       23.01%      59.67%\n",
       "31   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "32   47.35%           41.59%       56.45%       23.98%      61.74%\n",
       "33   51.87%           43.24%       59.28%       21.23%      58.09%\n",
       "34   52.81%           42.07%       57.81%       23.01%      59.67%\n",
       "35   53.10%           42.84%       60.70%       21.12%      58.28%\n",
       "36   49.00%           41.71%       56.43%       23.88%      61.18%\n",
       "37   46.42%           40.95%       56.46%       24.64%      62.88%\n",
       "38   50.94%           42.60%       59.29%       21.89%      59.24%\n",
       "39   52.81%           42.07%       57.81%       23.01%      59.67%"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percentages = pd.DataFrame(percentages)\n",
    "percentages.columns = ['Openness','Concientiousness','Extraversion','Agreebleness','Neuroticism']\n",
    "percentages['Openness'] = percentages['Openness'].astype(float).map(\"{:.2%}\".format)\n",
    "percentages['Concientiousness'] = percentages['Concientiousness'].astype(float).map(\"{:.2%}\".format)\n",
    "percentages['Extraversion'] = percentages['Extraversion'].astype(float).map(\"{:.2%}\".format)\n",
    "percentages['Agreebleness'] = percentages['Agreebleness'].astype(float).map(\"{:.2%}\".format)\n",
    "percentages['Neuroticism'] = percentages['Neuroticism'].astype(float).map(\"{:.2%}\".format)\n",
    "percentages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
